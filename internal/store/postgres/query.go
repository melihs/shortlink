// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
// source: pkg/link/link.proto

package postgres

import (
	"github.com/Masterminds/squirrel"

	"github.com/batazor/shortlink/internal/store/query"
)

func (p *PostgresLinkList) buildFilter(query squirrel.SelectBuilder, filter *query.Filter) squirrel.SelectBuilder {
	if filter != nil {
		clausesEq := squirrel.Eq{}
		clausesNotEq := squirrel.NotEq{}
		clausesLt := squirrel.Lt{}
		clausesLtOrEq := squirrel.LtOrEq{}
		clausesGt := squirrel.Gt{}
		clausesGtOrEq := squirrel.GtOrEq{}
		clausesLike := squirrel.Like{}
		clausesNotLike := squirrel.NotLike{}

		if filter.Url != nil {
			if filter.Url.Eq != nil {
				clausesEq["url"] = filter.Url.Eq
			}
		}

		if filter.Url != nil {
			if filter.Url.Ne != nil {
				clausesNotEq["url"] = filter.Url.Ne
			}
		}

		if filter.Url != nil {
			if filter.Url.Lt != nil {
				clausesLt["url"] = filter.Url.Lt
			}
		}

		if filter.Url != nil {
			if filter.Url.Le != nil {
				clausesLtOrEq["url"] = filter.Url.Le
			}
		}

		if filter.Url != nil {
			if filter.Url.Gt != nil {
				clausesGt["url"] = filter.Url.Gt
			}
		}

		if filter.Url != nil {
			if filter.Url.Ge != nil {
				clausesGtOrEq["url"] = filter.Url.Ge
			}
		}

		if filter.Url != nil {
			if filter.Url.Contains != nil {
				clausesLike["url"] = filter.Url.Contains
			}
		}

		if filter.Url != nil {
			if filter.Url.NotContains != nil {
				clausesNotLike["url"] = filter.Url.NotContains
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Eq != nil {
				clausesEq["hash"] = filter.Hash.Eq
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Ne != nil {
				clausesNotEq["hash"] = filter.Hash.Ne
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Lt != nil {
				clausesLt["hash"] = filter.Hash.Lt
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Le != nil {
				clausesLtOrEq["hash"] = filter.Hash.Le
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Gt != nil {
				clausesGt["hash"] = filter.Hash.Gt
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Ge != nil {
				clausesGtOrEq["hash"] = filter.Hash.Ge
			}
		}

		if filter.Hash != nil {
			if filter.Hash.Contains != nil {
				clausesLike["hash"] = filter.Hash.Contains
			}
		}

		if filter.Hash != nil {
			if filter.Hash.NotContains != nil {
				clausesNotLike["hash"] = filter.Hash.NotContains
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Eq != nil {
				clausesEq["describe"] = filter.Describe.Eq
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Ne != nil {
				clausesNotEq["describe"] = filter.Describe.Ne
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Lt != nil {
				clausesLt["describe"] = filter.Describe.Lt
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Le != nil {
				clausesLtOrEq["describe"] = filter.Describe.Le
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Gt != nil {
				clausesGt["describe"] = filter.Describe.Gt
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Ge != nil {
				clausesGtOrEq["describe"] = filter.Describe.Ge
			}
		}

		if filter.Describe != nil {
			if filter.Describe.Contains != nil {
				clausesLike["describe"] = filter.Describe.Contains
			}
		}

		if filter.Describe != nil {
			if filter.Describe.NotContains != nil {
				clausesNotLike["describe"] = filter.Describe.NotContains
			}
		}
		query = query.Where(clausesEq)
		query = query.Where(clausesNotEq)
		query = query.Where(clausesLt)
		query = query.Where(clausesLtOrEq)
		query = query.Where(clausesGt)
		query = query.Where(clausesGtOrEq)
		query = query.Where(clausesLike)
		query = query.Where(clausesNotLike)
	}

	return query
}

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_create_links_table_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\xc9\xcc\xcb\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\xc8\xd3\xf7\xad\x1c\x00\x00\x00")

func _000001_create_links_table_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_create_links_table_down_sql,
		"000001_create_links_table.down.sql",
	)
}

var __000001_create_links_table_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfa\x14\xef\xb6\x36\xc4\xd0\x16\xf6\x52\xd3\x43\xea\xd5\xb6\x06\x47\xa6\xfe\x43\x72\x0b\x72\xac\x62\xd5\x8a\x1c\x24\xb9\x24\xdf\xbe\x28\x72\xda\xb4\x04\xda\xce\x49\x9a\x79\xfc\xe6\xf1\xa4\x24\x41\x66\x04\x77\x02\x1c\x8e\x77\x4a\xe0\xeb\x64\xa0\xa4\x1e\x2d\xc9\x2a\xba\x6e\x28\x9a\xf5\xc7\x82\x22\x7f\x05\x2b\x1b\xd0\x5d\x5e\x37\xf5\x22\x88\x08\x00\xc8\x1e\xa1\xac\x30\x92\xab\xe5\xa2\x27\x07\x3d\x2b\x45\x70\x5f\x87\x49\x5b\x67\xb8\xd4\x2e\x20\xf6\xa7\xf1\x77\xc1\xc9\xc8\x23\x37\x17\x8c\xe2\xb2\xba\x4e\x66\xb3\x10\xbf\x73\x73\x18\xb8\x89\xde\x3d\x3f\xc7\x3f\xe9\x41\x33\x70\x3b\xfc\x4d\xd3\x0b\x7b\x30\xb2\x13\x70\xe2\xec\x42\xeb\x9b\x9d\x34\x6e\x87\x0e\x7f\x1a\x8f\x53\x42\xb2\x72\xb3\xa1\xac\x41\xc9\x96\x18\xae\xae\x91\xd7\x78\x2a\xa4\x1e\xa1\xa4\x75\x4f\x29\x21\xeb\xa2\xa1\xd5\xbd\xe4\xba\xa0\xdc\x32\xdf\x2d\x61\x87\xc9\x38\xdf\xf7\xc8\x90\x6a\xcb\xf2\x2f\x2d\x45\xce\x5e\xe8\xee\x51\xb8\x7b\xd9\xef\x67\xa9\x7b\x71\x0e\x28\xb6\xac\x8e\x64\x1f\xff\x07\xc5\x47\xf3\x98\xe3\x27\x9e\x94\x24\xc8\x59\x56\xb4\x2f\x34\x09\xb2\x24\x01\xb7\x10\x67\x7e\x3c\x29\xf1\x1e\x35\x2d\x68\xd6\x40\xf6\x2b\xff\x16\xab\x10\xf6\x6b\x55\x6e\x16\xd0\xf6\x33\xad\xa8\xff\x04\x1f\xf0\xf6\x4d\xfa\xcf\xc6\x7c\x72\xbf\xdc\xb4\x75\xce\x3e\xa1\x73\x46\x88\xc5\xd9\xcd\x14\xa2\xd9\xa8\x38\x25\x3f\x02\x00\x00\xff\xff\x57\x91\x44\x16\xa9\x02\x00\x00")

func _000001_create_links_table_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_create_links_table_up_sql,
		"000001_create_links_table.up.sql",
	)
}

var __000002_add_test_link_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000002_add_test_link_down_sql() ([]byte, error) {
	return bindata_read(
		__000002_add_test_link_down_sql,
		"000002_add_test_link.down.sql",
	)
}

var __000002_add_test_link_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x6f\x82\x30\x14\xc7\xef\xfc\x15\x2f\xbd\xa0\x09\x68\xa6\x37\x3c\x55\x6d\xb6\x66\x48\x17\xe8\xbc\x9a\x82\x55\x98\x48\x4d\x5b\xb6\xb9\x65\xff\xfb\xe2\xaf\x2c\x0e\xb2\x93\x19\x27\xf2\xf2\xfa\xf9\xbe\x4f\xde\xf3\x7d\xe0\x31\x8e\x12\x3c\xe1\x94\x45\xe0\xff\xd7\xe7\x8c\xc9\x3d\x8d\x1c\x00\x00\x9a\xb0\x10\x1f\xd3\x43\x32\x27\x21\xc4\x04\x4f\x61\xc2\x66\x33\xca\x39\x99\x8e\x1c\x27\xc1\x73\xf2\xc4\x68\xc4\xc1\xbe\x2f\x32\x2d\x85\x95\x8b\xa5\x5c\x89\xba\xb4\x8b\xb2\xa8\x36\x66\xe4\x38\x34\x4a\x48\xcc\x81\x46\x9c\xc1\xb1\xd6\xa9\x75\xe9\x41\x2e\x4c\xee\xc1\x52\x9a\x4c\x17\xa9\xf4\xe0\xc5\xa8\xaa\x7b\x4c\x9d\xe3\xf0\x99\x24\xd0\x71\x73\x6b\x77\x26\xe8\xf7\x53\x61\xc5\x87\xd2\x3d\x5d\xbb\x1e\xb8\xdb\xfd\x83\x30\xf9\xdd\xe1\x77\xb6\x87\x9d\xd4\x46\x55\xa2\x84\x37\x99\x9a\xc2\xca\x43\xf9\x13\xd5\xba\x44\x01\x6a\xbe\x47\x1e\xa0\x43\x30\x0a\xd0\x19\x83\x3c\x74\x99\x01\x05\xa8\x05\x88\xbe\xdc\xee\x4d\x2c\xd6\x85\xcd\xeb\xb4\x97\xa9\xed\x65\xa0\x1f\x9b\xc1\xd9\x46\x64\x99\xaa\x2d\xa8\x15\x9c\xba\xdb\x6c\x9a\x9c\x86\xd5\xa0\x61\xf5\x1b\x7c\x33\xab\xd7\x4d\xbb\xd1\xf0\xb2\x1f\xb1\x96\xa0\x2a\x38\xf5\xb5\xf9\x5c\x13\x1a\x2e\xc3\xe6\x86\xae\x90\x67\x13\xdf\x87\x98\x85\xe1\x18\x4f\x1e\x81\xb3\x3f\xce\xf1\x74\xbe\x23\xe7\x3b\x00\x00\xff\xff\x41\x53\xa8\x1d\x5f\x03\x00\x00")

func _000002_add_test_link_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_add_test_link_up_sql,
		"000002_add_test_link.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_create_links_table.down.sql": _000001_create_links_table_down_sql,
	"000001_create_links_table.up.sql":   _000001_create_links_table_up_sql,
	"000002_add_test_link.down.sql":      _000002_add_test_link_down_sql,
	"000002_add_test_link.up.sql":        _000002_add_test_link_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_create_links_table.down.sql": {_000001_create_links_table_down_sql, map[string]*_bintree_t{}},
	"000001_create_links_table.up.sql":   {_000001_create_links_table_up_sql, map[string]*_bintree_t{}},
	"000002_add_test_link.down.sql":      {_000002_add_test_link_down_sql, map[string]*_bintree_t{}},
	"000002_add_test_link.up.sql":        {_000002_add_test_link_up_sql, map[string]*_bintree_t{}},
}}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	Get(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error)
	Set(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*SetMetaResponse, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

var metadataGetStreamDesc = &grpc.StreamDesc{
	StreamName: "Get",
}

func (c *metadataClient) Get(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/rpc.Metadata/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var metadataSetStreamDesc = &grpc.StreamDesc{
	StreamName: "Set",
}

func (c *metadataClient) Set(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*SetMetaResponse, error) {
	out := new(SetMetaResponse)
	err := c.cc.Invoke(ctx, "/rpc.Metadata/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataService is the service API for Metadata service.
// Fields should be assigned to their respective handler implementations only before
// RegisterMetadataService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type MetadataService struct {
	Get func(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
	Set func(context.Context, *SetMetaRequest) (*SetMetaResponse, error)
}

func (s *MetadataService) get(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Get == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
	}
	in := new(GetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/rpc.Metadata/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*GetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *MetadataService) set(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Set == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
	}
	in := new(SetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/rpc.Metadata/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Set(ctx, req.(*SetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterMetadataService registers a service implementation with a gRPC server.
func RegisterMetadataService(s grpc.ServiceRegistrar, srv *MetadataService) {
	sd := grpc.ServiceDesc{
		ServiceName: "rpc.Metadata",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Get",
				Handler:    srv.get,
			},
			{
				MethodName: "Set",
				Handler:    srv.set,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "internal/metadata/domain/rpc.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewMetadataService creates a new MetadataService containing the
// implemented methods of the Metadata service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewMetadataService(s interface{}) *MetadataService {
	ns := &MetadataService{}
	if h, ok := s.(interface {
		Get(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
	}); ok {
		ns.Get = h.Get
	}
	if h, ok := s.(interface {
		Set(context.Context, *SetMetaRequest) (*SetMetaResponse, error)
	}); ok {
		ns.Set = h.Set
	}
	return ns
}

// UnstableMetadataService is the service API for Metadata service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableMetadataService interface {
	Get(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
	Set(context.Context, *SetMetaRequest) (*SetMetaResponse, error)
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"context"
	"github.com/batazor/shortlink/internal/pkg/db"
	"github.com/batazor/shortlink/internal/pkg/logger"
	"github.com/batazor/shortlink/internal/pkg/mq"
	"github.com/batazor/shortlink/internal/pkg/notify"
	"github.com/batazor/shortlink/internal/services/link/application"
	"github.com/batazor/shortlink/internal/services/link/domain/link"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/mq"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/rpc"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/store"
	"github.com/batazor/shortlink/internal/services/metadata/infrastructure/rpc"
	"github.com/batazor/shortlink/pkg/rpc"
	"github.com/google/wire"
	"google.golang.org/grpc"
)

// Injectors from di.go:

func InitializeLinkService(ctx context.Context, runRPCClient *grpc.ClientConn, runRPCServer *rpc.RPCServer, log logger.Logger, db2 *db.Store, mq2 mq.MQ) (*LinkService, func(), error) {
	metadataClient, err := NewMetadataRPCClient(runRPCClient)
	if err != nil {
		return nil, nil, err
	}
	linkStore, err := NewLinkStore(ctx, log, db2)
	if err != nil {
		return nil, nil, err
	}
	service, err := NewLinkApplication(log, metadataClient, linkStore)
	if err != nil {
		return nil, nil, err
	}
	link, err := NewLinkRPCServer(runRPCServer, service, log)
	if err != nil {
		return nil, nil, err
	}
	event, err := InitLinkMQ(ctx, log, mq2)
	if err != nil {
		return nil, nil, err
	}
	linkService, err := NewLinkService(log, link, linkStore, service, event)
	if err != nil {
		return nil, nil, err
	}
	return linkService, func() {
	}, nil
}

// di.go:

type LinkService struct {
	Logger logger.Logger

	// Delivery
	linkRPCServer *link_rpc.Link

	// Application
	service *link_application.Service

	// Repository
	linkStore *store.LinkStore
	linkMQ    *api_mq.Event
}

// LinkService =========================================================================================================
var LinkSet = wire.NewSet(

	NewLinkRPCServer,
	NewMetadataRPCClient,
	InitLinkMQ,

	NewLinkApplication,

	NewLinkStore,

	NewLinkService,
)

func InitLinkMQ(ctx context.Context, log logger.Logger, mq2 mq.MQ) (*api_mq.Event, error) {
	linkMQ := &api_mq.Event{
		MQ: mq2,
	}
	notify.Subscribe(uint32(link.LinkEvent_ADD), linkMQ)

	return linkMQ, nil
}

func NewLinkStore(ctx context.Context, logger2 logger.Logger, db2 *db.Store) (*store.LinkStore, error) {
	store2 := &store.LinkStore{}
	linkStore, err := store2.Use(ctx, logger2, db2)
	if err != nil {
		return nil, err
	}

	return linkStore, nil
}

func NewLinkApplication(logger2 logger.Logger, metadataService metadata_rpc.MetadataClient, store2 *store.LinkStore) (*link_application.Service, error) {
	linkService, err := link_application.New(logger2, metadataService, store2)
	if err != nil {
		return nil, err
	}

	return linkService, nil
}

func NewLinkRPCServer(runRPCServer *rpc.RPCServer, application *link_application.Service, log logger.Logger) (*link_rpc.Link, error) {
	linkRPCServer, err := link_rpc.New(runRPCServer, application, log)
	if err != nil {
		return nil, err
	}

	return linkRPCServer, nil
}

func NewMetadataRPCClient(runRPCClient *grpc.ClientConn) (metadata_rpc.MetadataClient, error) {
	metadataRPCClient := metadata_rpc.NewMetadataClient(runRPCClient)
	return metadataRPCClient, nil
}

func NewLinkService(
	log logger.Logger,
	linkRPCServer *link_rpc.Link,
	linkStore *store.LinkStore,
	service *link_application.Service,
	linkMQ *api_mq.Event,
) (*LinkService, error) {
	return &LinkService{
		Logger:        log,
		linkRPCServer: linkRPCServer,
		linkStore:     linkStore,
		linkMQ:        linkMQ,
		service:       service,
	}, nil
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/batazor/shortlink/internal/pkg/logger"
	"github.com/batazor/shortlink/internal/pkg/mq/v1"
	"github.com/batazor/shortlink/internal/services/logger/application"
	"github.com/batazor/shortlink/internal/services/logger/infrastructure/mq"
	"github.com/google/wire"
)

// Injectors from di.go:

func InitializeLoggerService(ctx context.Context, log logger.Logger, mq v1.MQ) (*LoggerService, func(), error) {
	service, err := NewLoggerApplication(log)
	if err != nil {
		return nil, nil, err
	}
	event, err := InitLoggerMQ(ctx, log, mq, service)
	if err != nil {
		return nil, nil, err
	}
	loggerService, err := NewLoggerService(log, service, event)
	if err != nil {
		return nil, nil, err
	}
	return loggerService, func() {
	}, nil
}

// di.go:

type LoggerService struct {
	Logger logger.Logger

	// Delivery
	loggerMQ *logger_mq.Event

	// Application
	loggerService *logger_application.Service
}

// LoggerService =======================================================================================================
var LoggerSet = wire.NewSet(

	InitLoggerMQ,

	NewLoggerApplication,

	NewLoggerService,
)

func InitLoggerMQ(ctx context.Context, log logger.Logger, mq v1.MQ, service *logger_application.Service) (*logger_mq.Event, error) {
	loggerMQ, err := logger_mq.New(mq, log, service)
	if err != nil {
		return nil, err
	}

	return loggerMQ, nil
}

func NewLoggerApplication(logger2 logger.Logger) (*logger_application.Service, error) {
	loggerService, err := logger_application.New(logger2)
	if err != nil {
		return nil, err
	}

	return loggerService, nil
}

func NewLoggerService(
	log logger.Logger,

	loggerService *logger_application.Service,

	loggerMQ *logger_mq.Event,
) (*LoggerService, error) {
	return &LoggerService{
		Logger: log,

		loggerService: loggerService,

		loggerMQ: loggerMQ,
	}, nil
}

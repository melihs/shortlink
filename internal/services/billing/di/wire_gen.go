// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package billing_di

import (
	"context"
	"github.com/google/wire"
	"github.com/shortlink-org/shortlink/internal/di"
	"github.com/shortlink-org/shortlink/internal/di/pkg/config"
	"github.com/shortlink-org/shortlink/internal/di/pkg/context"
	"github.com/shortlink-org/shortlink/internal/di/pkg/logger"
	"github.com/shortlink-org/shortlink/internal/di/pkg/store"
	"github.com/shortlink-org/shortlink/internal/di/pkg/traicing"
	"github.com/shortlink-org/shortlink/internal/pkg/db"
	"github.com/shortlink-org/shortlink/internal/pkg/eventsourcing/store"
	"github.com/shortlink-org/shortlink/internal/pkg/logger"
	"github.com/shortlink-org/shortlink/internal/services/billing/application/account"
	"github.com/shortlink-org/shortlink/internal/services/billing/application/order"
	"github.com/shortlink-org/shortlink/internal/services/billing/application/payment"
	"github.com/shortlink-org/shortlink/internal/services/billing/application/tariff"
	"github.com/shortlink-org/shortlink/internal/services/billing/infrastructure/api/http"
	"github.com/shortlink-org/shortlink/internal/services/billing/infrastructure/api/rpc/order/v1"
	"github.com/shortlink-org/shortlink/internal/services/billing/infrastructure/api/rpc/payment/v1"
	"github.com/shortlink-org/shortlink/internal/services/billing/infrastructure/api/rpc/tariff/v1"
	"github.com/shortlink-org/shortlink/internal/services/billing/infrastructure/store"
	"github.com/shortlink-org/shortlink/pkg/rpc"
	"go.opentelemetry.io/otel/trace"
)

// Injectors from wire.go:

func InitializeBillingService() (*BillingService, func(), error) {
	context, cleanup, err := ctx.New()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := logger_di.New(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configConfig, err := config.New()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracerProvider, cleanup3, err := traicing_di.New(context, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rpcServer, cleanup4, err := rpc.InitServer(logger, tracerProvider)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dbStore, cleanup5, err := store.New(context, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	billingStore, err := NewBillingStore(context, logger, dbStore)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accountService, err := NewAccountApplication(logger, billingStore)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	orderService, err := NewOrderApplication(logger, billingStore)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	paymentService, err := NewPaymentApplication(logger, billingStore)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tariffService, err := NewTariffApplication(logger, billingStore)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, err := NewBillingAPIServer(context, logger, tracerProvider, rpcServer, dbStore, accountService, orderService, paymentService, tariffService)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	billingService, err := NewBillingService(logger, configConfig, server)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return billingService, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type BillingService struct {
	// Common
	Logger logger.Logger
	Config *config.Config

	// Delivery
	httpAPIServer    *api.Server
	orderRPCServer   *order_rpc.Order
	paymentRPCServer *payment_rpc.Payment
	tariffRPCServer  *tariff_rpc.Tariff

	// Repository
	accountRepository    *billing_store.AccountRepository
	tariffRepository     *billing_store.TariffRepository
	eventStoreRepository *event_store.EventStore
}

// BillingService ======================================================================================================
var BillingSet = wire.NewSet(di.DefaultSet, rpc.InitServer, rpc.InitClient, store.New, NewBillingAPIServer,

	NewBillingStore,

	NewTariffApplication,
	NewAccountApplication,
	NewOrderApplication,
	NewPaymentApplication,

	NewBillingService,
)

func NewBillingStore(ctx2 context.Context, logger2 logger.Logger, db2 *db.Store) (*billing_store.BillingStore, error) {
	store2 := &billing_store.BillingStore{}
	billingStore, err := store2.Use(ctx2, logger2, db2)
	if err != nil {
		return nil, err
	}

	return billingStore, nil
}

func NewAccountApplication(logger2 logger.Logger, store2 *billing_store.BillingStore) (*account_application.AccountService, error) {
	accountService, err := account_application.New(logger2, store2.Account)
	if err != nil {
		return nil, err
	}

	return accountService, nil
}

func NewOrderApplication(logger2 logger.Logger, store2 *billing_store.BillingStore) (*order_application.OrderService, error) {
	orderService, err := order_application.New(logger2, store2.EventStore)
	if err != nil {
		return nil, err
	}

	return orderService, nil
}

func NewPaymentApplication(logger2 logger.Logger, store2 *billing_store.BillingStore) (*payment_application.PaymentService, error) {
	paymentService, err := payment_application.New(logger2, store2.EventStore)
	if err != nil {
		return nil, err
	}

	return paymentService, nil
}

func NewTariffApplication(logger2 logger.Logger, store2 *billing_store.BillingStore) (*tariff_application.TariffService, error) {
	tariffService, err := tariff_application.New(logger2, store2.Tariff)
	if err != nil {
		return nil, err
	}

	return tariffService, nil
}

func NewBillingAPIServer(ctx2 context.Context, logger2 logger.Logger,

	tracer *trace.TracerProvider,
	rpcServer *rpc.RPCServer, db2 *db.Store,

	accountService *account_application.AccountService,
	orderService *order_application.OrderService,
	paymentService *payment_application.PaymentService,
	tariffService *tariff_application.TariffService,
) (*api.Server, error) {

	API := api.Server{}

	apiService, err := API.Use(ctx2, db2, logger2, tracer,

		accountService,
		orderService,
		paymentService,
		tariffService,
	)
	if err != nil {
		return nil, err
	}

	return apiService, nil
}

func NewBillingService(

	log logger.Logger, config2 *config.Config,

	httpAPIServer *api.Server,
) (*BillingService, error) {
	return &BillingService{

		Logger: log,
		Config: config2,

		httpAPIServer: httpAPIServer,
	}, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package billing_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BalanceServiceClient is the client API for BalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceServiceClient interface {
	BalanceHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceHistoryResponse, error)
	BalanceUpdate(ctx context.Context, in *BalanceUpdateRequest, opts ...grpc.CallOption) (*BalanceUpdateResponse, error)
}

type balanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceServiceClient(cc grpc.ClientConnInterface) BalanceServiceClient {
	return &balanceServiceClient{cc}
}

func (c *balanceServiceClient) BalanceHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceHistoryResponse, error) {
	out := new(BalanceHistoryResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.rpc.balance.v1.BalanceService/BalanceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) BalanceUpdate(ctx context.Context, in *BalanceUpdateRequest, opts ...grpc.CallOption) (*BalanceUpdateResponse, error) {
	out := new(BalanceUpdateResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.rpc.balance.v1.BalanceService/BalanceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServiceServer is the server API for BalanceService service.
// All implementations must embed UnimplementedBalanceServiceServer
// for forward compatibility
type BalanceServiceServer interface {
	BalanceHistory(context.Context, *emptypb.Empty) (*BalanceHistoryResponse, error)
	BalanceUpdate(context.Context, *BalanceUpdateRequest) (*BalanceUpdateResponse, error)
	mustEmbedUnimplementedBalanceServiceServer()
}

// UnimplementedBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBalanceServiceServer struct {
}

func (UnimplementedBalanceServiceServer) BalanceHistory(context.Context, *emptypb.Empty) (*BalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceHistory not implemented")
}
func (UnimplementedBalanceServiceServer) BalanceUpdate(context.Context, *BalanceUpdateRequest) (*BalanceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceUpdate not implemented")
}
func (UnimplementedBalanceServiceServer) mustEmbedUnimplementedBalanceServiceServer() {}

// UnsafeBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServiceServer will
// result in compilation errors.
type UnsafeBalanceServiceServer interface {
	mustEmbedUnimplementedBalanceServiceServer()
}

func RegisterBalanceServiceServer(s grpc.ServiceRegistrar, srv BalanceServiceServer) {
	s.RegisterService(&BalanceService_ServiceDesc, srv)
}

func _BalanceService_BalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).BalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.rpc.balance.v1.BalanceService/BalanceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).BalanceHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_BalanceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).BalanceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.rpc.balance.v1.BalanceService/BalanceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).BalanceUpdate(ctx, req.(*BalanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BalanceService_ServiceDesc is the grpc.ServiceDesc for BalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infrastructure.rpc.balance.v1.BalanceService",
	HandlerType: (*BalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BalanceHistory",
			Handler:    _BalanceService_BalanceHistory_Handler,
		},
		{
			MethodName: "BalanceUpdate",
			Handler:    _BalanceService_BalanceUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrastructure/rpc/balance/v1/balance_rpc.proto",
}

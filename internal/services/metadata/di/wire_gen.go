// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"context"

	"github.com/google/wire"

	"github.com/batazor/shortlink/internal/pkg/db"
	"github.com/batazor/shortlink/internal/pkg/logger"
	v12 "github.com/batazor/shortlink/internal/pkg/mq/v1"
	"github.com/batazor/shortlink/internal/pkg/notify"
	"github.com/batazor/shortlink/internal/services/metadata/application"
	v1_2 "github.com/batazor/shortlink/internal/services/metadata/domain/metadata/v1"
	"github.com/batazor/shortlink/internal/services/metadata/infrastructure/mq"
	"github.com/batazor/shortlink/internal/services/metadata/infrastructure/rpc/metadata/v1"
	"github.com/batazor/shortlink/internal/services/metadata/infrastructure/store"
	"github.com/batazor/shortlink/pkg/rpc"
)

// Injectors from di.go:

func InitializeMetaDataService(ctx context.Context, runRPCServer *rpc.RPCServer, log logger.Logger, db2 *db.Store, mq2 v12.MQ) (*MetaDataService, func(), error) {
	metaStore, err := NewMetaDataStore(ctx, log, db2)
	if err != nil {
		return nil, nil, err
	}
	service, err := NewMetaDataApplication(metaStore)
	if err != nil {
		return nil, nil, err
	}
	event, err := InitLinkMQ(ctx, log, mq2)
	if err != nil {
		return nil, nil, err
	}
	metadata, err := NewMetaDataRPCServer(runRPCServer, service, log)
	if err != nil {
		return nil, nil, err
	}
	metaDataService, err := NewMetaDataService(log, service, event, metadata, metaStore)
	if err != nil {
		return nil, nil, err
	}
	return metaDataService, func() {
	}, nil
}

// di.go:

type MetaDataService struct {
	Logger logger.Logger

	// Delivery
	linkMQ            *api_mq.Event
	metadataRPCServer *v1.Metadata

	// Application
	service *metadata.Service

	// Repository
	metadataStore *meta_store.MetaStore
}

// MetaDataService =====================================================================================================
var MetaDataSet = wire.NewSet(

	InitLinkMQ,
	NewMetaDataRPCServer,

	NewMetaDataApplication,

	NewMetaDataStore,

	NewMetaDataService,
)

func InitLinkMQ(ctx context.Context, log logger.Logger, mq2 v12.MQ) (*api_mq.Event, error) {
	linkMQ := &api_mq.Event{
		MQ: mq2,
	}
	notify.Subscribe(v1_2.METHOD_ADD, linkMQ)

	return linkMQ, nil
}

func NewMetaDataStore(ctx context.Context, logger2 logger.Logger, db2 *db.Store) (*meta_store.MetaStore, error) {
	store := &meta_store.MetaStore{}
	metadataStore, err := store.Use(ctx, logger2, db2)
	if err != nil {
		return nil, err
	}

	return metadataStore, nil
}

func NewMetaDataApplication(store *meta_store.MetaStore) (*metadata.Service, error) {
	metadataService, err := metadata.New(store)
	if err != nil {
		return nil, err
	}

	return metadataService, nil
}

func NewMetaDataRPCServer(runRPCServer *rpc.RPCServer, application *metadata.Service, log logger.Logger) (*v1.Metadata, error) {
	metadataRPCServer, err := v1.New(runRPCServer, application, log)
	if err != nil {
		return nil, err
	}

	return metadataRPCServer, nil
}

func NewMetaDataService(
	log logger.Logger,

	service *metadata.Service,

	linkMQ *api_mq.Event,
	metadataRPCServer *v1.Metadata,

	metadataStore *meta_store.MetaStore,
) (*MetaDataService, error) {
	return &MetaDataService{
		Logger: log,

		service: service,

		linkMQ:            linkMQ,
		metadataRPCServer: metadataRPCServer,

		metadataStore: metadataStore,
	}, nil
}

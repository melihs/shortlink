// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"context"
	"github.com/batazor/shortlink/internal/pkg/db"
	"github.com/batazor/shortlink/internal/pkg/logger"
	"github.com/batazor/shortlink/internal/pkg/mq/v1"
	"github.com/batazor/shortlink/internal/pkg/notify"
	"github.com/batazor/shortlink/internal/services/metadata/application"
	v1_3 "github.com/batazor/shortlink/internal/services/metadata/domain/metadata/v1"
	"github.com/batazor/shortlink/internal/services/metadata/infrastructure/mq"
	v1_2 "github.com/batazor/shortlink/internal/services/metadata/infrastructure/rpc/metadata/v1"
	"github.com/batazor/shortlink/internal/services/metadata/infrastructure/store"
	"github.com/batazor/shortlink/pkg/rpc"
	"github.com/google/wire"
)

// Injectors from di.go:

func InitializeMetaDataService(ctx context.Context, runRPCServer *rpc.RPCServer, log logger.Logger, db2 *db.Store, mq v1.MQ) (*MetaDataService, func(), error) {
	metaStore, err := NewMetaDataStore(ctx, log, db2)
	if err != nil {
		return nil, nil, err
	}
	service, err := NewMetaDataApplication(metaStore)
	if err != nil {
		return nil, nil, err
	}
	event, err := InitMetadataMQ(ctx, log, mq)
	if err != nil {
		return nil, nil, err
	}
	metadata, err := NewMetaDataRPCServer(runRPCServer, service, log)
	if err != nil {
		return nil, nil, err
	}
	metaDataService, err := NewMetaDataService(log, service, event, metadata, metaStore)
	if err != nil {
		return nil, nil, err
	}
	return metaDataService, func() {
	}, nil
}

// di.go:

type MetaDataService struct {
	Logger logger.Logger

	// Delivery
	metadataMQ        *metadata_mq.Event
	metadataRPCServer *v1_2.Metadata

	// Application
	service *metadata.Service

	// Repository
	metadataStore *meta_store.MetaStore
}

// MetaDataService =====================================================================================================
var MetaDataSet = wire.NewSet(

	InitMetadataMQ,
	NewMetaDataRPCServer,

	NewMetaDataApplication,

	NewMetaDataStore,

	NewMetaDataService,
)

func InitMetadataMQ(ctx context.Context, log logger.Logger, mq v1.MQ) (*metadata_mq.Event, error) {
	metadataMQ, err := metadata_mq.New(mq)
	if err != nil {
		return nil, err
	}
	notify.Subscribe(v1_3.METHOD_ADD, metadataMQ)

	return metadataMQ, nil
}

func NewMetaDataStore(ctx context.Context, logger2 logger.Logger, db2 *db.Store) (*meta_store.MetaStore, error) {
	store := &meta_store.MetaStore{}
	metadataStore, err := store.Use(ctx, logger2, db2)
	if err != nil {
		return nil, err
	}

	return metadataStore, nil
}

func NewMetaDataApplication(store *meta_store.MetaStore) (*metadata.Service, error) {
	metadataService, err := metadata.New(store)
	if err != nil {
		return nil, err
	}

	return metadataService, nil
}

func NewMetaDataRPCServer(runRPCServer *rpc.RPCServer, application *metadata.Service, log logger.Logger) (*v1_2.Metadata, error) {
	metadataRPCServer, err := v1_2.New(runRPCServer, application, log)
	if err != nil {
		return nil, err
	}

	return metadataRPCServer, nil
}

func NewMetaDataService(
	log logger.Logger,

	service *metadata.Service,

	metadataMQ *metadata_mq.Event,
	metadataRPCServer *v1_2.Metadata,

	metadataStore *meta_store.MetaStore,
) (*MetaDataService, error) {
	return &MetaDataService{
		Logger: log,

		service: service,

		metadataMQ:        metadataMQ,
		metadataRPCServer: metadataRPCServer,

		metadataStore: metadataStore,
	}, nil
}

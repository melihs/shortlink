// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"context"
	"github.com/batazor/shortlink/internal/logger"
	"github.com/batazor/shortlink/internal/mq"
	"github.com/batazor/shortlink/internal/mq/kafka"
	"github.com/batazor/shortlink/internal/store"
	"github.com/batazor/shortlink/internal/traicing"
	"github.com/batazor/shortlink/pkg/api"
	"github.com/heptiolabs/healthcheck"
	"github.com/opentracing/opentracing-go"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/viper"
	"io"
	"net/http"
	"time"
)

// Injectors from wire.go:

func InitializeService() (*logger.Logger, error) {
	loggerLogger, err := InitLogger()
	if err != nil {
		return nil, err
	}
	return loggerLogger, nil
}

// wire.go:

// Service - heplers
type Service struct {
	log         logger.Logger
	tracer      opentracing.Tracer
	tracerClose io.Closer
	db          store.DB
	mq          mq.MQ
	api         api.Server
}

func CloseFn(c io.Closer) func() error { return func() error { return c.Close() } }

func InitLogger() (*logger.Logger, error) {
	viper.SetDefault("LOG_LEVEL", logger.INFO_LEVEL)
	viper.SetDefault("LOG_TIME_FORMAT", time.RFC3339Nano)

	conf := logger.Configuration{
		Level:      viper.GetInt("LOG_LEVEL"),
		TimeFormat: viper.GetString("LOG_TIME_FORMAT"),
	}

	log, err := logger.NewLogger(logger.Zap, conf)
	if err != nil {
		return nil, err
	}

	return &log, nil
}

func InitTracer() (*opentracing.Tracer, func() error, error) {
	viper.SetDefault("TRACER_SERVICE_NAME", "ShortLink")
	viper.SetDefault("TRACER_URI", "localhost:6831")

	config := traicing.Config{
		ServiceName: viper.GetString("TRACER_SERVICE_NAME"),
		URI:         viper.GetString("TRACER_URI"),
	}

	tracer, tracerClose, err := traicing.Init(config)
	if err != nil {
		return nil, nil, err
	}

	return &tracer, CloseFn(tracerClose), nil
}

func InitMonitoring() *http.ServeMux {

	registry := prometheus.NewRegistry()

	health := healthcheck.NewMetricsHandler(registry, "common")

	health.AddLivenessCheck("goroutine-threshold", healthcheck.GoroutineCountCheck(100))

	commonMux := http.NewServeMux()

	commonMux.Handle("/metrics", promhttp.HandlerFor(registry, promhttp.HandlerOpts{}))

	commonMux.HandleFunc("/live", health.LiveEndpoint)

	commonMux.HandleFunc("/ready", health.ReadyEndpoint)

	return commonMux
}

func InitMQ(ctx context.Context) (*mq.MQ, error) {
	viper.SetDefault("MQ_ENABLED", "false")

	if viper.GetBool("MQ_ENABLED") {
		var service mq.MQ
		service = &kafka.Kafka{}

		if err := service.Init(ctx); err != nil {
			return nil, err
		}

		return &service, nil
	}

	return nil, nil
}

// Code generated by go-bindata.
// sources:
// mutation.graphqls
// query.graphqls
// schema.graphqls
// types.graphqls
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xf0\x2d\x2d\x49\x2c\xc9\xcc\xcf\x53\xa8\xe6\x52\x50\x50\x50\x28\x2d\x48\x49\x2c\x49\xf5\xc9\xcc\xcb\xd6\x28\x2d\xca\xb1\x52\x08\x2e\x29\xca\xcc\x4b\xd7\x51\xc8\x48\x2c\xce\x40\xf0\x52\x52\x8b\x93\x8b\x32\x93\x52\x61\x22\x9a\x56\x0a\x4e\xf9\xf9\x39\xa9\x89\x79\x60\x43\x92\x8b\x52\xc9\x33\x04\xa4\x45\x11\x6c\x44\x4a\x6a\x4e\x2a\xd4\x08\x64\x5d\x08\x8b\x14\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\xc9\x68\x79\xa5\xc1\x00\x00\x00")

func mutationGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphqls,
		"mutation.graphqls",
	)
}

func mutationGraphqls() (*asset, error) {
	bytes, err := mutationGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphqls", size: 193, mode: os.FileMode(436), modTime: time.Unix(1573247933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x0a\x42\x31\x10\x84\xe1\x3e\xa7\x18\xb1\xd1\xc6\x03\xa4\xb3\x14\x2c\x14\xed\xc4\xe2\x15\xa3\x59\x5e\xd8\x84\xcd\x5a\x04\xf1\xee\x62\x84\xd7\x7e\xc3\xfc\x6b\x5c\x13\x71\x7e\xd1\x3a\xbc\x57\xc2\x58\x8d\x8d\xea\x0d\x53\xce\x28\x0f\x78\x22\xa8\x6e\x1d\xb5\xc8\xcf\x45\xbd\x0c\xdd\x9f\x0e\xbb\x30\x5e\xff\xc0\x3b\x00\x40\x16\x9d\x37\x69\x6a\x29\xe2\xe2\x26\xfa\xdc\x46\x1c\x45\xe7\xd5\xb2\xb6\x88\xdb\x90\x7b\xf8\x84\x6f\x00\x00\x00\xff\xff\xaf\xa4\x87\x3c\x82\x00\x00\x00")

func queryGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphqls,
		"query.graphqls",
	)
}

func queryGraphqls() (*asset, error) {
	bytes, err := queryGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphqls", size: 130, mode: os.FileMode(436), modTime: time.Unix(1571565241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x3a\x60\x91\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x4b\x87\xab\x96\x0b\x10\x00\x00\xff\xff\x96\xb8\xd3\x7f\x35\x00\x00\x00")

func schemaGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphqls,
		"schema.graphqls",
	)
}

func schemaGraphqls() (*asset, error) {
	bytes, err := schemaGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphqls", size: 53, mode: os.FileMode(436), modTime: time.Unix(1571565241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typesGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x3f\x0b\xc2\x30\x10\x05\xf0\x3d\x9f\xe2\x49\xe6\xd6\xbd\xab\x75\x10\xc4\x0e\xf6\x0b\xf4\xcf\x23\x0d\xad\x49\x48\xae\x43\x11\xbf\xbb\x18\x05\xc5\x1b\x6e\xf8\x71\xf7\x9e\xc6\xc1\x8f\x84\xa1\x63\xec\x84\x23\xfa\x0d\x21\x7a\xf1\x43\x61\xe8\x0a\xe3\x85\xb7\xb0\x74\xc2\x12\x75\x83\x4b\xd3\xe2\x58\x9f\xda\x52\x69\x24\xbf\xc6\x81\x15\xc2\x6c\xf6\x8b\x75\x73\x5e\x65\xfe\x55\x4a\xa3\xdd\x02\x93\xd2\x28\xde\xa3\x64\x0b\xc4\xd9\xba\x19\x77\x05\x00\x6b\x5c\x2a\xe0\x2a\xd1\x3a\xb3\x43\xa6\xa9\x4b\xd3\xbf\x8d\x4c\x43\xb4\x3d\x7f\xfd\xf1\x0d\x4b\x9f\xb4\x57\x77\x85\x4c\xf9\xe0\x19\x00\x00\xff\xff\xe8\x77\x86\xa8\xd7\x00\x00\x00")

func typesGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_typesGraphqls,
		"types.graphqls",
	)
}

func typesGraphqls() (*asset, error) {
	bytes, err := typesGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "types.graphqls", size: 215, mode: os.FileMode(436), modTime: time.Unix(1573249958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphqls": mutationGraphqls,
	"query.graphqls":    queryGraphqls,
	"schema.graphqls":   schemaGraphqls,
	"types.graphqls":    typesGraphqls,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphqls": &bintree{mutationGraphqls, map[string]*bintree{}},
	"query.graphqls":    &bintree{queryGraphqls, map[string]*bintree{}},
	"schema.graphqls":   &bintree{schemaGraphqls, map[string]*bintree{}},
	"types.graphqls":    &bintree{typesGraphqls, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

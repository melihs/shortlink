// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcweb

import (
	context "context"
	link "github.com/batazor/shortlink/internal/api/domain/link"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LinkClient is the client API for Link service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkClient interface {
	GetLinks(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*link.Links, error)
	GetLink(ctx context.Context, in *link.Link, opts ...grpc.CallOption) (*link.Link, error)
	CreateLink(ctx context.Context, in *link.Link, opts ...grpc.CallOption) (*link.Link, error)
	DeleteLink(ctx context.Context, in *link.Link, opts ...grpc.CallOption) (*empty.Empty, error)
}

type linkClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkClient(cc grpc.ClientConnInterface) LinkClient {
	return &linkClient{cc}
}

var linkGetLinksStreamDesc = &grpc.StreamDesc{
	StreamName: "GetLinks",
}

func (c *linkClient) GetLinks(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*link.Links, error) {
	out := new(link.Links)
	err := c.cc.Invoke(ctx, "/grpcweb.Link/GetLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var linkGetLinkStreamDesc = &grpc.StreamDesc{
	StreamName: "GetLink",
}

func (c *linkClient) GetLink(ctx context.Context, in *link.Link, opts ...grpc.CallOption) (*link.Link, error) {
	out := new(link.Link)
	err := c.cc.Invoke(ctx, "/grpcweb.Link/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var linkCreateLinkStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateLink",
}

func (c *linkClient) CreateLink(ctx context.Context, in *link.Link, opts ...grpc.CallOption) (*link.Link, error) {
	out := new(link.Link)
	err := c.cc.Invoke(ctx, "/grpcweb.Link/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var linkDeleteLinkStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteLink",
}

func (c *linkClient) DeleteLink(ctx context.Context, in *link.Link, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcweb.Link/DeleteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkService is the service API for Link service.
// Fields should be assigned to their respective handler implementations only before
// RegisterLinkService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type LinkService struct {
	GetLinks   func(context.Context, *LinkRequest) (*link.Links, error)
	GetLink    func(context.Context, *link.Link) (*link.Link, error)
	CreateLink func(context.Context, *link.Link) (*link.Link, error)
	DeleteLink func(context.Context, *link.Link) (*empty.Empty, error)
}

func (s *LinkService) getLinks(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetLinks == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetLinks not implemented")
	}
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpcweb.Link/GetLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetLinks(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *LinkService) getLink(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetLink == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
	}
	in := new(link.Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpcweb.Link/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetLink(ctx, req.(*link.Link))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *LinkService) createLink(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.CreateLink == nil {
		return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
	}
	in := new(link.Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpcweb.Link/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateLink(ctx, req.(*link.Link))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *LinkService) deleteLink(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.DeleteLink == nil {
		return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
	}
	in := new(link.Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpcweb.Link/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteLink(ctx, req.(*link.Link))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterLinkService registers a service implementation with a gRPC server.
func RegisterLinkService(s grpc.ServiceRegistrar, srv *LinkService) {
	sd := grpc.ServiceDesc{
		ServiceName: "grpcweb.Link",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetLinks",
				Handler:    srv.getLinks,
			},
			{
				MethodName: "GetLink",
				Handler:    srv.getLink,
			},
			{
				MethodName: "CreateLink",
				Handler:    srv.createLink,
			},
			{
				MethodName: "DeleteLink",
				Handler:    srv.deleteLink,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "pkg/api/grpc-web/api.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewLinkService creates a new LinkService containing the
// implemented methods of the Link service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewLinkService(s interface{}) *LinkService {
	ns := &LinkService{}
	if h, ok := s.(interface {
		GetLinks(context.Context, *LinkRequest) (*link.Links, error)
	}); ok {
		ns.GetLinks = h.GetLinks
	}
	if h, ok := s.(interface {
		GetLink(context.Context, *link.Link) (*link.Link, error)
	}); ok {
		ns.GetLink = h.GetLink
	}
	if h, ok := s.(interface {
		CreateLink(context.Context, *link.Link) (*link.Link, error)
	}); ok {
		ns.CreateLink = h.CreateLink
	}
	if h, ok := s.(interface {
		DeleteLink(context.Context, *link.Link) (*empty.Empty, error)
	}); ok {
		ns.DeleteLink = h.DeleteLink
	}
	return ns
}

// UnstableLinkService is the service API for Link service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableLinkService interface {
	GetLinks(context.Context, *LinkRequest) (*link.Links, error)
	GetLink(context.Context, *link.Link) (*link.Link, error)
	CreateLink(context.Context, *link.Link) (*link.Link, error)
	DeleteLink(context.Context, *link.Link) (*empty.Empty, error)
}

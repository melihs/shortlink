include:
  - template: Pages/SwaggerUI.gitlab-ci.yml
  - template: API-Fuzzing.gitlab-ci.yml

# RELEASE ==============================================================================================================
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli
  script:
    - echo 'running release_job'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created using the release-cli $EXTRA_DESCRIPTION' # $EXTRA_DESCRIPTION must be defined
    tag_name: '$CI_COMMIT_TAG'                                      # elsewhere in the pipeline.
    ref: '$CI_COMMIT_TAG'
  rules:
    - if: $CI_COMMIT_TAG

goreleaser:
  stage: release
  image: docker:stable
  services:
    - docker:dind
  variables:
    GORELEASER_IMAGE: goreleaser/goreleaser:latest

    # Optionally use GitLab's built-in image registry.
    # DOCKER_REGISTRY: $CI_REGISTRY
    # DOCKER_USERNAME: $CI_REGISTRY_USER
    # DOCKER_PASSWORD: $CI_REGISTRY_PASSWORD

    # Or, use any registry, including the official one.
    # DOCKER_REGISTRY: https://index.docker.io/v1/

    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script: |
    docker pull $GORELEASER_IMAGE

    # GITLAB_TOKEN is needed to create GitLab releases.
    # DOCKER_* are needed to push Docker images.
    docker run --rm --privileged \
      -v $PWD:/go/src/gitlab.com/shortlink-org/shortlink \
      -w /go/src/gitlab.com/shortlink-org/shortlink \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -e DOCKER_USERNAME -e DOCKER_PASSWORD -e DOCKER_REGISTRY  \
      -e GITLAB_TOKEN \
      $GORELEASER_IMAGE release --rm-dist
  rules:
    - if: $CI_COMMIT_TAG

pages:
  stage: release
  variables:
    DOCS_FOLDER: "docs"
    SPEC_TO_DISPLAY: "api.swagger.json"
  only:
    - tags

# API-Fuzzing ==========================================================================================================
variables:
  FUZZAPI_PROFILE: Quick-10
  # Perform testing using a Postman Collection v2.1
  # All of the APIs defined in the collection will be
  # tested.
  FUZZAPI_POSTMAN_COLLECTION: ./docs/shortlink.postman_collection.json
  #
  # The target API instance to be tested. This must be
  # a test deployment. NEVER fuzz a production environment.
  FUZZAPI_TARGET_URL: ${FUZZAPI_TARGET_URL}
  #
  # Provide auth token for target being tested. This variable
  # is set in the CI configuration as a secret.
  # FUZZAPI_OVERRIDES_ENV: '{"headers":{"Authorization":"Token REDACTED"}}'

apifuzzer_fuzz_unlicensed:
  stage: .post
  rules:
    - when: never

apifuzzer_fuzz:
  stage: .post
  rules:
    - if: $CI_COMMIT_TAG

apifuzzer_fuzz_dnd:
  stage: .post
  rules:
    - if: $CI_COMMIT_TAG

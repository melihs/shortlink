# Common default values for argo-cd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# Ref: https://github.com/argoproj/argo-cd

argo:
  enabled: true

argo-cd:
  fullnameOverride: argocd

  global:
    # image:
    #  tag: v2.6.0-rc7

    logging:
      format: json

  controller:
    metrics:
      enabled: true
      applicationLabels:
        enabled: true
      serviceMonitor:
        enabled: false
    rules:
      enabled: true
      spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[Argo CD] No reported applications"
            description: >
              Argo CD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            description: >
             The application [{{`{{$labels.name}}`}} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.

  dex:
    enabled: true

    metrics:
      enabled: true
      serviceMonitor:
        enabled: false

  redis:
    enabled: false

  externalRedis:
    host: shortlink-redis-master.redis

  server:
    extraArgs:
      - --rootpath
      - /argo/cd
      - --basehref
      - /argo/cd

    metrics:
      enabled: true
      serviceMonitor:
        enabled: false

    ingress:
      enabled: true

      ingressClassName: nginx

      annotations:
        cert-manager.io/cluster-issuer: cert-manager-production
        nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        nginx.ingress.kubernetes.io/configuration-snippet: |-
          proxy_ssl_server_name on;
          proxy_ssl_name $host;
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/secure-backends: "true"
        nginx.ingress.kubernetes.io/enable-modsecurity: "false"
        nginx.ingress.kubernetes.io/enable-owasp-core-rules: "false"
        nginx.ingress.kubernetes.io/enable-opentracing: "false"

      hosts:
        - shortlink.best

      paths:
        - /argo/cd(/|$)(.*)

      tls:
        - secretName: shortlink-ingress-tls
          hosts:
            - shortlink.best

      https: true

    config:
      url: https://shortlink.best/argo/cd

      statusbadge.enabled: "true"

      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,secrets+literal,
        https

    configAnnotations: {}

    rbacConfig:
      policy.csv: |
        p, role:org-admin, applications, *, */*, allow
        p, role:org-admin, clusters, get, *, allow
        p, role:org-admin, repositories, get, *, allow
        p, role:org-admin, repositories, create, *, allow
        p, role:org-admin, repositories, update, *, allow
        p, role:org-admin, repositories, delete, *, allow
        g, shortlink-org:devops, role:org-admin
      policy.default: role:readonly

    extensions:
      enabled: true

  repoServer:
    serviceAccount:
      create: true
      name: argocd-repo-server

    rbac:
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get

    env:
      - name: HELM_PLUGINS
        value: /custom-tools/helm-plugins/
      - name: HELM_SECRETS_SOPS_PATH
        value: /custom-tools/sops
      - name: HELM_SECRETS_VALS_PATH
        value: /custom-tools/vals
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /custom-tools/kubectl
      - name: HELM_SECRETS_CURL_PATH
        value: /custom-tools/curl
      # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "false"
    # helm secrets wrapper mode installation (optional)
    # - name: HELM_SECRETS_HELM_PATH
    #   value: /usr/local/bin/helm

    metrics:
      enabled: true
      serviceMonitor:
        enabled: false

    volumes:
      - name: custom-tools
        emptyDir: {}
      - name: sops-gpg
        secret:
          secretName: sops-gpg

    volumeMounts:
      - mountPath: /custom-tools
        name: custom-tools
      - mountPath: /sops-gpg/
        name: sops-gpg
    # helm secrets wrapper mode installation (optional)
    #  - mountPath: /usr/local/sbin/helm
    #    subPath: helm
    #    name: custom-tools

    initContainers:
      - name: download-tools
        image: alpine:latest
        command: [ sh, -ec ]
        env:
          - name: HELM_SECRETS_VERSION
            value: "4.2.2"
          - name: KUBECTL_VERSION
            value: "1.26.1"
          - name: VALS_VERSION
            value: "0.21.0"
          - name: SOPS_VERSION
            value: "3.7.3"
        args:
          - |
            mkdir -p /custom-tools/helm-plugins
            wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;

            wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux
            wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

            wget -qO- https://github.com/variantdev/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;
            
            # helm secrets wrapper mode installation (optional)
            # RUN printf '#!/usr/bin/env sh\nexec %s secrets "$@"' "${HELM_SECRETS_HELM_PATH}" >"/usr/local/sbin/helm" && chmod +x "/custom-tools/helm"
            
            chmod +x /custom-tools/*
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools

  applicationSet:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: false

  notifications:
    argocdUrl: https://shortlink.best/argo/cd
    notifiers:
      service.slack: |
        token: $slack-token
        username: argocd # optional username
        icon: :dart: # optional icon for the message (supports both emoij and url notation)

    metrics:
      enabled: true
      serviceMonitor:
        enabled: false

  configs:
    repositories:
      shortlink:
        url: https://github.com/shortlink-org/shortlink
        name: shortlink
        type: git

argo-events:
  fullnameOverride: argo-events

argo-workflows:
  fullnameOverride: argo-workflows

  controller:
    metricsConfig:
      enabled: true
    telemetryConfig:
      enabled: true
    serviceMonitor:
      enabled: false

    workflowNamespaces: []

    # -- enable persistence using postgres
    # postgresql:
    #  host: localhost
    #  port: 5432
    #  database: argo
    #  tableName: argo_workflows

  server:
    extraArgs:
      - --basehref
      - /argo/workflows/
      - --auth-mode=server

    baseHref: /argo/workflows/

    extraEnv:
      - name: ARGO_BASE_HREF
        value: /argo/workflows

    ingress:
      enabled: true

      ingressClassName: nginx

      annotations:
        cert-manager.io/cluster-issuer: cert-manager-production
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/enable-modsecurity: "false"
        nginx.ingress.kubernetes.io/enable-owasp-core-rules: "false"
        nginx.ingress.kubernetes.io/enable-opentracing: "false"
        nginx.ingress.kubernetes.io/rewrite-target: /$1
        nginx.ingress.kubernetes.io/use-regex: "true"

      hosts:
        - shortlink.best

      paths:
        - /argo/workflows/?(.*)

      tls:
        - secretName: shortlink-ingress-tls
          hosts:
            - shortlink.best

argocd-apps:
  # -- Deploy Argo CD Applications within this helm release
  # @default -- `[]` (See [values.yaml])
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
  applications: [ ]

  # -- Deploy Argo CD Projects within this helm release
  # @default -- `[]` (See [values.yaml])
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
  projects: [ ]

argo-rollouts:
  fullnameOverride: argo-rollouts

  controller:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 20m
        memory: 16Mi

  dashboard:
    enabled: true
    readonly: true

    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 20m
        memory: 16Mi

    ingress:
      enabled: true

      ingressClassName: nginx

      annotations:
        cert-manager.io/cluster-issuer: cert-manager-production
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/enable-modsecurity: "false"
        nginx.ingress.kubernetes.io/enable-owasp-core-rules: "false"
        nginx.ingress.kubernetes.io/enable-opentracing: "false"

      hosts:
        - shortlink.best

      paths:
        - /argo/rollouts

      tls:
        - secretName: shortlink-ingress-tls
          hosts:
            - shortlink.best

  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

argocd-image-updater:
  fullnameOverride: argocd-image-updater

  config:
    applicationsAPIKind: kubernetes
    # argocd:
    #  serverAddress: argocd-server
    #  insecure: false
    gitCommitUser: argocd-image-updater
    gitCommitMail: argocd@shortlink.best
    gitCommitTemplate: |
      build: automatic update of {{ .AppName }}
      
      {{ range .AppChanges -}}
      updates image {{ .Image }} tag '{{ .OldTag }}' to '{{ .NewTag }}'
      {{ end -}}

      Signed-off-by: argocd <argocd@shortlink.best>

    # sshConfig: |
    #   Host github.com
    #   HostName github.com
    #     User git
    #     IdentityFile /etc/ssh/ssh-privatekey
    #     IdentitiesOnly yes
    #     StrictHostKeyChecking no
    #     UserKnownHostsFile /dev/null

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 16Mi

  updateStrategy:
    type: Recreate

  registries:
    - name: GitLab
      api_url: https://registry.gitlab.com
      ping: yes
      default: true

  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

replicaCount: 1

image:
  registry: docker.io
  repository: provectuslabs/kafka-ui
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

existingConfigMap: ""
yamlApplicationConfig: {}
#  kafka:
#    clusters:
#      - name: shortlink
#        bootstrapServers: kafka-kafka-bootstrap:9092
  # spring:
  #   security:
  #     oauth2:
#    auth:
#      type: disabled
#    management:
#      health:
#        ldap:
#          enabled: false
yamlApplicationConfigConfigMap: {}
  # keyName: config.yml
  # name: configMapName
existingSecret: ""
envs:
  secret: {}
  config:
    KAFKA_CLUSTERS_0_NAME: shortlink
    KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-kafka-bootstrap:9092
    KAFKA_CLUSTERS_0_ZOOKEEPER: kafka-zookeeper-client:2181
    SPRING_SECURITY_USER_NAME: "redacted"
    SPRING_SECURITY_USER_PASSWORD: "redacted"
    MANAGEMENT_HEALTH_LDAP_ENABLED: "FALSE"
    SERVER_SERVLET_CONTEXT_PATH: "/kafka-ui"

networkPolicy:
  enabled: false
  egressRules:
    ## Additional custom egress rules
    ## e.g:
    ## customRules:
    ##   - to:
    ##       - namespaceSelector:
    ##           matchLabels:
    ##             label: example
    customRules: []
  ingressRules:
    ## Additional custom ingress rules
    ## e.g:
    ## customRules:
    ##   - from:
    ##       - namespaceSelector:
    ##           matchLabels:
    ##             label: example
    customRules: []

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  # if you want to force a specific nodePort. Must be use with service.type=NodePort
  # nodePort:

host: architecture.ddns.net

ingress:
  enabled: true
  # -- Type ingress-controller: nginx, istio
  type: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: cert-manager-production
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/enable-opentracing: "true"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"

  tls:
    - secretName: shortlink-ingress-tls
      hosts:
        - architecture.ddns.net

resources:
   limits:
     cpu: 200m
     memory: 512Mi
#   requests:
#     cpu: 200m
#     memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

env: {}

initContainers: {}

volumeMounts: {}

volumes: {}
